networks:
  app_network:
    driver: bridge

services:
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: dockerfile-frontend
  #   container_name: inventory-frontend
  #   environment:
  #     DOCKER_FRONTEND_PORT: ${DOCKER_FRONTEND_PORT}
  #     NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
  #   ports:
  #     - ${DOCKER_FRONTEND_PORT}:${DOCKER_FRONTEND_PORT}
  #   networks:
  #     - app_network
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #     - ./.env:/app/.env

  backend:
    build:
      context: ./backend
      dockerfile: dockerfile-api
    container_name: inventory-backend
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_DATABASE}
      API_PORT: ${API_PORT}
      FRONTEND_URLS: ${FRONTEND_URLS}
    ports:
      - ${API_PORT}:${API_PORT}
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - app_network

  sqlserver:
    build:
      context: ./database
      dockerfile: dockerfile-sqlserver
    container_name: sqlserver
    environment:
      SA_PASSWORD: ${DB_PASSWORD}
      DB_PASSWORD: ${DB_PASSWORD}
      ACCEPT_EULA: "Y"
      DB_PORT: ${DB_PORT}
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - sqlserverdata:/var/opt/mssql
    networks:
      - app_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P $$DB_PASSWORD -Q 'SELECT 1' || exit 1",
        ]
      interval: 10s # Intervalo entre as verificações
      timeout: 5s # Tempo limite para cada verificação
      retries: 5 # Número de tentativas
      start_period: 30s # Tempo para o SQL Server inicializar

volumes:
  sqlserverdata:
